generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String           @id @default(cuid())
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  address         String
  contractId      String?
  iban            String
  name            String
  type            UserType
  authentication  Authentication?
  tenantBuildings BuildingTenant[]
  ownedBuildings  Building[]       @relation("LandlordBuildings")
  consumptions    Consumption[]
  costs           Cost[]

  @@map("users")
}

model Authentication {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  userId    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("authentications")
}

model Consumption {
  id             String   @id @default(cuid())
  timestamp      DateTime
  consumptionKwh Float
  userId         String
  createdAt      DateTime @default(now())
  user           User     @relation(fields: [userId], references: [id])

  @@index([timestamp, userId])
  @@map("consumptions")
}

model PvGeneration {
  id            String   @id @default(cuid())
  timestamp     DateTime
  generationKwh Float
  createdAt     DateTime @default(now())
  deviceId      String
  device        Device   @relation(fields: [deviceId], references: [id])

  @@index([timestamp])
  @@map("pv_generations")
}

model Cost {
  id        String   @id @default(cuid())
  pvCost    Float
  gridCost  Float
  baseFee   Float
  currency  String   @default("EUR")
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])

  @@map("costs")
}

model Building {
  id         String           @id @default(cuid())
  buildingId String           @unique
  address    String
  providerId String
  landlordId String
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt
  tenants    BuildingTenant[]
  landlord   User             @relation("LandlordBuildings", fields: [landlordId], references: [id])
  provider   Provider         @relation(fields: [providerId], references: [id])
  devices    Device[]
  settlement Settlement?

  @@map("buildings")
}

model BuildingTenant {
  id         String   @id @default(cuid())
  buildingId String
  tenantId   String
  createdAt  DateTime @default(now())
  building   Building @relation(fields: [buildingId], references: [id])
  tenant     User     @relation(fields: [tenantId], references: [id])

  @@unique([buildingId, tenantId])
  @@map("building_tenants")
}

model Device {
  id            String         @id @default(cuid())
  deviceId      String         @unique
  status        String
  buildingId    String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  building      Building       @relation(fields: [buildingId], references: [id])
  pvGenerations PvGeneration[]

  @@map("devices")
}

model Provider {
  id                     String     @id @default(cuid())
  name                   String
  windEnergyPct          Float      @default(0)
  solarEnergyPct         Float      @default(0)
  nuclearEnergyPct       Float      @default(0)
  createdAt              DateTime   @default(now())
  updatedAt              DateTime   @updatedAt
  coalEnergyPct          Float      @default(0)
  gasEnergyPct           Float      @default(0)
  miscFossilEnergyPct    Float      @default(0)
  miscRenewableEnergyPct Float      @default(0)
  buildings              Building[]

  @@map("providers")
}

model Settlement {
  id           String   @id @default(cuid())
  currency     String   @default("EUR")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  buildingId   String   @unique
  feedingPrice Float
  gridCost     Float
  building     Building @relation(fields: [buildingId], references: [id])

  @@map("settlements")
}

enum UserType {
  TENANT
  LANDLORD
}
